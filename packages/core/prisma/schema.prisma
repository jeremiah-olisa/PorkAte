generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id           String   @id @default(cuid())
  name         String
  publicKey    String   @unique
  secretKey    String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  wallets      Wallet[]
  
  @@map("applications")
}

model Wallet {
  id              String    @id @default(cuid())
  accountNumber   String    @unique
  phoneNumber     String    @unique
  balance         Decimal   @default(0) @db.Decimal(18, 2)
  currency        String    @default("NGN")
  accountType     String
  status          String
  hashValue       String
  
  applicationId   String
  application     Application @relation(fields: [applicationId], references: [id])
  
  kyc             KYC?
  ledgers         Ledger[]
  liens           Lien[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([phoneNumber])
  @@index([accountNumber])
  @@index([applicationId])
  @@map("wallets")
}

model KYC {
  id              String    @id @default(cuid())
  walletId        String    @unique
  wallet          Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  profileType     String
  tier            Int       @default(1)
  
  fullName        String?
  email           String?
  phoneNumber     String
  address         String?
  
  bvn             String?
  nin             String?
  dateOfBirth     DateTime?
  
  companyName     String?
  rcNumber        String?
  taxId           String?
  
  groupName       String?
  groupType       String?
  
  documents       Json?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("kyc_records")
}

model Ledger {
  id              String    @id @default(cuid())
  walletId        String
  wallet          Wallet    @relation(fields: [walletId], references: [id])
  
  entryType       String
  amount          Decimal   @db.Decimal(18, 2)
  previousBalance Decimal   @db.Decimal(18, 2)
  currentBalance  Decimal   @db.Decimal(18, 2)
  
  transactionRef  String
  narration       String
  
  createdAt       DateTime  @default(now())
  
  @@index([walletId])
  @@index([transactionRef])
  @@index([createdAt])
  @@map("ledgers")
}

model Lien {
  id              String    @id @default(cuid())
  walletId        String
  wallet          Wallet    @relation(fields: [walletId], references: [id])
  
  amount          Decimal   @db.Decimal(18, 2)
  reason          String
  isActive        Boolean   @default(true)
  
  transactionRef  String?
  
  createdAt       DateTime  @default(now())
  releasedAt      DateTime?
  
  @@index([walletId, isActive])
  @@map("liens")
}
